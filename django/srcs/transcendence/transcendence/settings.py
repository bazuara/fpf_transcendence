"""
Django settings for transcendence project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os


POSTGRES_DB = os.getenv("POSTGRES_DB")
POSTGRES_USER = os.getenv("POSTGRES_USER")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/ 

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Start with the base part of your hosts
BASE_HOST = "42madrid.com"

# Use list comprehension to generate all host combinations
ALLOWED_HOSTS = [
    f"c{cluster}r{row}s{seat}.{BASE_HOST}"
    for cluster in range(1, 4) #Clusters from 1 to 3
    for row in range(1, 20)    # Rows from 1 to 17
    for seat in range(1, 7)    # Seats from 1 to 6
]

ALLOWED_HOSTS += [
    f"c3r{row}s{seat}.{BASE_HOST}"
    for row in range(1, 15)  # Rows from 1 to 14
    for seat in range(1, 7)  # Seats from 1 to 6
]


# Optionally, add localhost and other hosts for development
ALLOWED_HOSTS += ["localhost", "127.0.0.1", "::1"]


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'game',
    'general',
    'session_management',
    'static',
    'rooms',
    'social',
    'tournaments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware to handle intra login
    'session_management.middleware.LoginRequiredMiddleware',
    # Middleware for serving mimetypes
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

LOGIN_URL = '/landing/'

ROOT_URLCONF = 'transcendence.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'transcendence.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {

        'ENGINE': 'django.db.backends.postgresql_psycopg2',

        'NAME': POSTGRES_DB,

        'USER': POSTGRES_USER,

        'PASSWORD': POSTGRES_PASSWORD,

        'HOST': 'postgres',

        'PORT': '5432',

    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Where files from "python manage.py collectstatic" will be stored 
STATIC_URL = '/static_files/'  # This URL is used to refer to static files
STATIC_ROOT = os.path.join(BASE_DIR, 'static_files')  # Ensure this path exists and is used for collected static files

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Where media will be stored, profile avatars will be stored in /media/upload/
MEDIA_URL = '/static_files/media/'  # URL for accessing media files
MEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')  # Directory where uploaded files are stored


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Daphne
ASGI_APPLICATION = "transcendence.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}
